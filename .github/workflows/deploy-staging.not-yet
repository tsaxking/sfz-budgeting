name: Deploy
on:
  push:
    tags:
      - '*'
jobs:
  build:
    uses: ./.github/workflows/testing-build.yml
    # secrets:
    #   GH_TOKEN: ${{ secrets.GH_TOKEN }}
  backend:
    uses: ./.github/workflows/testing-unit.yml
    # secrets:
    #   GH_TOKEN: ${{ secrets.GH_TOKEN }}
  e2e:
    uses: ./.github/workflows/testing-e2e.yml
    # secrets:
    #   GH_TOKEN: ${{ secrets.GH_TOKEN }}
  # linter:
  #   uses: ./.github/workflows/linter.yml
  #   secrets:
  #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
  formatter:
    uses: ./.github/workflows/code-formatter.yml
    # secrets:
    #   GH_TOKEN: ${{ secrets.GH_TOKEN }}
  svelte-check:
    uses: ./.github/workflows/testing-svelte-check.yml
    # secrets:
    #   GH_TOKEN: ${{ secrets.GH_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    # if branch is main
    if: github.ref == 'refs/heads/main'
    needs: [build, e2e, backend, formatter, svelte-check]
    steps:
      - name: Retrieve git dependencies
        uses: actions/checkout@v3
        with:
          submodules: 'true'
          token: ${{ secrets.GH_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: v22.12.0

      - name: Push to Deploy
        run: |
          TAG_NAME=$(git describe --tags --abbrev=0)

          echo "testing if on branch 'main'"
          if [ "$(git rev-parse --abbrev-ref HEAD)" != "main" ]; then
            echo "not on branch 'main', exiting"
            exit 0
          fi

          echo "Setting up identity"
          # Setup the committers identity.
          git config --global user.email "taylorking206@u.boisestate.edu"
          git config --global user.name "Webpack Bot"

          echo "Pushing changes to staging branch..."

          echo "Good, we're on main. Pushing to staging..."
          echo "Deleting old staging branch"
          git branch -D staging || true
          git push origin --delete staging || true

          echo "Creating new staging branch"
          git checkout --orphan staging
          git reset --hard
          git commit --allow-empty -m "Initializing staging branch"

          echo "Merging main into staging"
          git merge main --strategy-option=theirs --allow-unrelated-histories -m "Merging main into gh-pages"
          git pull origin main --allow-unrelated-histories

          echo "formatting and linting"
          pnpm i
          pnpm run fmt
          pnpm run lint

          git add .
          git commit --allow-empty -m "Merging main into staging: $TAG_NAME"
          git push origin staging